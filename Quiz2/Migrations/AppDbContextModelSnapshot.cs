// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quiz2.Context;

#nullable disable

namespace Quiz2.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Quiz2.Entity.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("HolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WrongPasswordTries")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 100f,
                            CardNumber = "1234567891012345",
                            HolderName = "hasan",
                            IsActive = true,
                            Password = "123",
                            WrongPasswordTries = 0
                        },
                        new
                        {
                            Id = 2,
                            Balance = 200f,
                            CardNumber = "1234567891012346",
                            HolderName = "ali",
                            IsActive = true,
                            Password = "123",
                            WrongPasswordTries = 0
                        });
                });

            modelBuilder.Entity("Quiz2.Entity.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("DestinationCardId")
                        .HasColumnType("int");

                    b.Property<int>("SourceCardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isSuccessful")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DestinationCardId");

                    b.HasIndex("SourceCardId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Quiz2.Entity.Transaction", b =>
                {
                    b.HasOne("Quiz2.Entity.Card", "DestinationCard")
                        .WithMany("TransactionsAsDestination")
                        .HasForeignKey("DestinationCardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Quiz2.Entity.Card", "SourceCard")
                        .WithMany("TransactionsAsSource")
                        .HasForeignKey("SourceCardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DestinationCard");

                    b.Navigation("SourceCard");
                });

            modelBuilder.Entity("Quiz2.Entity.Card", b =>
                {
                    b.Navigation("TransactionsAsDestination");

                    b.Navigation("TransactionsAsSource");
                });
#pragma warning restore 612, 618
        }
    }
}
